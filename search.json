[
  {
    "objectID": "graph.html",
    "href": "graph.html",
    "title": "Graph",
    "section": "",
    "text": "source\n\nGraph\n\n Graph (x:float, y:float, name:str)\n\n2d representation of some function\n\n\n\n\nType\nDetails\n\n\n\n\nx\nfloat\nindependent variable\n\n\ny\nfloat\nindependent variable\n\n\nname\nstr\ngraph name"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev-test-project",
    "section": "",
    "text": "Nbdev library tutorial: https://nbdev.fast.ai/tutorials/tutorial.html  Windows support is partial (see Install section in nbdev library description)  To develop this project Ubuntu 22.04 LTS was used \nVery simplified workflow to create nbdev project 1. Create repository in Github and enable github pages in repository settings 2. Clone repository to specified directory 3. Create venv and install nbdev package 4. Initialize nbdev repository with help of command: ndev_new 5. Make some changes 6. Export files with nbdev_export 7. Create docs (and also update readme file) with command nbdev_docs 8. Add all necessary files (inlcuding .github) to index and make comming 9. Push changes 10. See deployment process in Actions tab"
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "nbdev-test-project",
    "section": "",
    "text": "Nbdev library tutorial: https://nbdev.fast.ai/tutorials/tutorial.html  Windows support is partial (see Install section in nbdev library description)  To develop this project Ubuntu 22.04 LTS was used \nVery simplified workflow to create nbdev project 1. Create repository in Github and enable github pages in repository settings 2. Clone repository to specified directory 3. Create venv and install nbdev package 4. Initialize nbdev repository with help of command: ndev_new 5. Make some changes 6. Export files with nbdev_export 7. Create docs (and also update readme file) with command nbdev_docs 8. Add all necessary files (inlcuding .github) to index and make comming 9. Push changes 10. See deployment process in Actions tab"
  },
  {
    "objectID": "index.html#troubleshooting",
    "href": "index.html#troubleshooting",
    "title": "nbdev-test-project",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nDuring the deployment process there was an error: ‘Error: Process completed with exit code 1.’  As turns out it was generated by this issue “+ echo -e ‘!!! Detected unstripped out notebooks!!!Remember to run nbdev_install_hooks’” So in order to avoid error command “nbdev_clean” should be executed (to handle unstripped out notebook)"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev-test-project",
    "section": "How to use",
    "text": "How to use\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math\nfrom nbdev_test_project.graph import Graph as Graph\nfrom nbdev_test_project.plot import SimplePlot as MyPlot\nimport ipywidgets as widgets\n\n\nPlot one graph\n\nX = np.arange(0, math.pi * 8, 0.01)\nY1 = np.sin(X)\nplot = MyPlot(plt, 1, 1, (6, 4))\ngraph = Graph(X, Y1, \"Sine\")\nplot.add_graph(graph)\nplot.plot_first_graph()\n\n\n\n\n\n\nPlot serveral graphs\n\nX = np.arange(0, math.pi * 8, 0.01)\nY1 = np.sin(X)\nY2 = np.cos(X)\nY3 = np.tan(X)\nplot = MyPlot(plt, 2,2, (12, 7))\nplot.add_graph(Graph(X, Y1, \"Sine\"))\nplot.add_graph(Graph(X, Y2, \"Cosine\"))\nplot.add_graph(Graph(X, Y3, \"Tangent\"))\nplot.plot_all_graphs()"
  },
  {
    "objectID": "index.html#interactive-demo",
    "href": "index.html#interactive-demo",
    "title": "nbdev-test-project",
    "section": "Interactive demo",
    "text": "Interactive demo\n\nAttention! only works in jupyter lab/notebook. Docks in github pages will show only the result of exported action althoug it is possible to change elements in the dropbox. See discussion https://github.com/quarto-dev/quarto-cli/discussions/6496 (particularly the answer from the person with nickname ‘cscheid’)\n\n\ndef plotGraph(x, y, name):\n    plot = MyPlot(plt, 1, 1, (6, 4))\n    graph = Graph(x, y, name)\n    plot.add_graph(graph)\n    plot.plot_first_graph()\n\n\nX = np.arange(0, math.pi * 8, 0.01)\n@widgets.interact(v = [(\"Sine\", 1), (\"Cosine\", 2), (\"Tangent\", 3) ])\ndef plotGraphs(v):\n    if v == 1:\n        Y1 = np.sin(X)\n        plotGraph(X, Y1, \"Sine\")\n    elif v == 2:\n        Y2 = np.cos(X)\n        plotGraph(X, Y2, \"Cosine\")\n    elif v == 3:\n        Y3 = np.tan(X)\n        plotGraph(X, Y3, \"Tangent\")"
  },
  {
    "objectID": "plot.html",
    "href": "plot.html",
    "title": "Plot",
    "section": "",
    "text": "source"
  },
  {
    "objectID": "plot.html#some-simple-tests",
    "href": "plot.html#some-simple-tests",
    "title": "Plot",
    "section": "Some simple tests",
    "text": "Some simple tests\n\nfrom fastcore.test import *\nimport matplotlib.pyplot as plt\nmyPlot = SimplePlot(plt, 10, 5, (6,4))\ntest_eq(myPlot.get_number_of_rows(), 10)\ntest_eq(myPlot.get_number_of_cols(), 5)"
  }
]